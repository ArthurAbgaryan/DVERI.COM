# Generated by Django 3.2.24 on 2024-07-03 13:55

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='accessories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accessory_group_id', models.PositiveIntegerField(null=True, verbose_name='Идентификатор группы аксессуаров')),
                ('title', models.CharField(max_length=250, null=True, verbose_name='Название')),
                ('pictures', models.JSONField(null=True, verbose_name='Картинка')),
                ('quantity', models.IntegerField(null=True, verbose_name='Количество в базовом комплекте')),
                ('price', models.PositiveIntegerField(null=True, verbose_name='Розничная цена')),
                ('price_dealer', models.PositiveIntegerField(null=True, verbose_name='Дилерская цена')),
                ('discount', models.PositiveIntegerField(null=True, verbose_name='Рознична скидка')),
                ('discount_dealer', models.PositiveIntegerField(null=True, verbose_name='Дилерская скидка')),
                ('label', models.CharField(max_length=250, null=True, verbose_name='Лейбл (статус)')),
                ('vendor_code', models.CharField(max_length=250, null=True, verbose_name='Артикул')),
                ('is_telescopic', models.BooleanField(null=True)),
            ],
            options={
                'verbose_name': 'Комплектующие',
                'verbose_name_plural': 'Комплектующие',
            },
        ),
        migrations.CreateModel(
            name='accessory_groups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250, null=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Группа комплектующих',
                'verbose_name_plural': 'Группы комплектующих',
            },
        ),
        migrations.CreateModel(
            name='attributes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250, null=True, verbose_name='Название')),
                ('position', models.PositiveIntegerField(null=True, verbose_name='Позиция в карточке товара')),
            ],
            options={
                'verbose_name': 'Атрибут',
                'verbose_name_plural': 'Атрибуты',
            },
        ),
        migrations.CreateModel(
            name='attributeValues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_id', models.PositiveIntegerField(null=True, verbose_name='Идентификатор атрибута')),
                ('title', models.CharField(max_length=250, null=True, verbose_name='Название')),
                ('is_generation_hidden', models.IntegerField(null=True)),
                ('generation_title', models.CharField(help_text='Название для генерации названия опции (если не задано, берётся из title)', max_length=2500, null=True)),
                ('description', models.CharField(max_length=2000, null=True, verbose_name='Описание (подсказка)')),
                ('position', models.PositiveIntegerField(null=True, verbose_name='Позиция в карточке товара')),
            ],
            options={
                'verbose_name': 'Значение атрибута',
                'verbose_name_plural': 'Значение атрибутов',
            },
        ),
        migrations.CreateModel(
            name='categories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250, null=True, verbose_name='Название')),
                ('parent_id', models.PositiveIntegerField(help_text='Идентификатор родительской категории', null=True)),
                ('lft', models.PositiveIntegerField(help_text='Параметр lft (хранение деревьев nested set). Может быть использовано для простой сортировки.', null=True)),
                ('rgt', models.PositiveIntegerField(help_text='Параметр rgt (хранение деревьев nested set)', null=True)),
            ],
            options={
                'verbose_name': 'Каталог',
                'verbose_name_plural': 'Каталоги',
            },
        ),
        migrations.CreateModel(
            name='categoriesImport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('json_file', models.FileField(upload_to='uploads/')),
                ('date_published', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='color_groups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Название', max_length=2500, null=True)),
                ('position', models.IntegerField(help_text='Позиция сортировки', null=True)),
            ],
            options={
                'verbose_name': 'Группа цветов',
                'verbose_name_plural': 'Группы цветов',
            },
        ),
        migrations.CreateModel(
            name='colors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color_group_id', models.PositiveIntegerField(null=True, verbose_name='Идентификатор группы цветов')),
                ('title', models.CharField(max_length=250, null=True, verbose_name='Название')),
                ('picture', models.URLField(help_text='url изображения', null=True, verbose_name='картинка')),
                ('position', models.PositiveIntegerField(help_text='Позиция сортировки', null=True, verbose_name='Позиция')),
            ],
        ),
        migrations.CreateModel(
            name='glasses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250, null=True, verbose_name='Стекло')),
            ],
            options={
                'verbose_name': 'Стекло',
                'verbose_name_plural': 'Стёкла',
            },
        ),
        migrations.CreateModel(
            name='product_tes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250, null=True)),
                ('json_field', models.JSONField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='products',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250, null=True, verbose_name='Название')),
                ('url', models.URLField(help_text='Ссылка на сайте', null=True)),
                ('category_id', models.PositiveIntegerField(help_text='Идентификатор категории', null=True)),
                ('accessory_group_id', models.PositiveIntegerField(help_text='Идентификатор группы аксессуаров', null=True)),
                ('color_id', models.PositiveIntegerField(help_text='Идентификатор цвета', null=True)),
                ('glass_id', models.PositiveIntegerField(help_text='Идентификатор стекла', null=True)),
                ('trademark_id', models.PositiveIntegerField(help_text='Идентификатор торговой марки', null=True)),
                ('price', models.IntegerField(null=True, verbose_name='Розничная цена')),
                ('price_dealer', models.IntegerField(null=True, verbose_name='Дилерская цена')),
                ('discount', models.IntegerField(null=True, verbose_name='Розничная скидка')),
                ('discount_dealer', models.IntegerField(null=True, verbose_name='Диллерская скидка')),
                ('label', models.CharField(max_length=250, null=True, verbose_name='Лейбл')),
                ('vendor_code', models.CharField(max_length=250, null=True, verbose_name='Артикул')),
                ('position', models.PositiveIntegerField(null=True, verbose_name='Позиция внутри родительского класса')),
                ('pictures', models.JSONField(help_text='Картинки в трех размерах', null=True)),
                ('options', models.JSONField(help_text='Содержит опции товара (размеры)', null=True, verbose_name='Опции')),
                ('properties', models.JSONField(help_text='Содержит описание товара (характеристики)', null=True)),
                ('accessory_properties', models.JSONField(help_text='Содержит фурнитуру входных дверей', null=True)),
                ('analogs', models.JSONField(null=True, verbose_name='Содержит аналоги товаров (похожий товар от другого производителя или другая модификация)')),
                ('related_products', models.JSONField(help_text='Содержит товары из блока "C этим товаров также покупают"', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='properties',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250, null=True)),
                ('is_accessory', models.BooleanField(help_text='Используется во вкладке Фурнитура у входных дверей', null=True)),
                ('position', models.PositiveIntegerField(null=True, verbose_name='Позиция')),
            ],
            options={
                'verbose_name': 'Характеристика',
                'verbose_name_plural': 'Характеристики',
            },
        ),
        migrations.CreateModel(
            name='property_values',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('property_id', models.PositiveIntegerField(null=True, verbose_name='Идентификатор характеристики')),
                ('product_id', models.PositiveIntegerField(null=True, verbose_name='Идентификатор товара')),
                ('title', models.CharField(max_length=2500, null=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Значение характеристик',
                'verbose_name_plural': 'Значение характеристик',
            },
        ),
        migrations.CreateModel(
            name='trademarks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250, null=True, verbose_name='Название')),
                ('url', models.URLField(null=True, verbose_name='url изображения')),
            ],
            options={
                'verbose_name': 'Торговая марка',
                'verbose_name_plural': 'Торговые марки',
            },
        ),
    ]
